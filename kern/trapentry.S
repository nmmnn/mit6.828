/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
 # 这个文件的作用就是异常发生时，处理器自动将那5个寄存器压栈后，继续构建一个trapframe，去看trap.h里trapframe的定义
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps # 最后都要跳转去执行 _alltraps函数

.text

# define T_DIVIDE     0		// divide error
# define T_DEBUG      1		// debug exception
# define T_NMI        2		// non-maskable interrupt
# define T_BRKPT      3		// breakpoint
# define T_OFLOW      4		// overflow
# define T_BOUND      5		// bounds check
# define T_ILLOP      6		// illegal opcode
# define T_DEVICE     7		// device not available
# define T_DBLFLT     8		// double fault
# /* #define T_COPROC  9 */	// reserved (not generated by recent processors)
# define T_TSS       10		// invalid task switch segment
# define T_SEGNP     11		// segment not present
# define T_STACK     12		// stack exception
# define T_GPFLT     13		// general protection fault
# define T_PGFLT     14		// page fault
# /* #define T_RES    15 */	// reserved
# define T_FPERR     16		// floating point error
# define T_ALIGN     17		// aligment check
# define T_MCHK      18		// machine check
# define T_SIMDERR   19		// SIMD floating point error

# // These are arbitrarily chosen, but with care not to overlap
# // processor defined exceptions or interrupt vectors.
# define T_SYSCALL   48		// system call

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
 # 定义一系列的入口函数，保存中断号到栈中，然后统一调用_alltraps函数，将trapframe剩下的寄存器压入内核栈
TRAPHANDLER_NOEC(t_divide, T_DIVIDE)
TRAPHANDLER_NOEC(t_debug, T_DEBUG)
TRAPHANDLER_NOEC(t_nmi, T_NMI)
TRAPHANDLER_NOEC(t_brkpt, T_BRKPT)
TRAPHANDLER_NOEC(t_oflow, T_OFLOW)
TRAPHANDLER_NOEC(t_bound, T_BOUND)
TRAPHANDLER_NOEC(t_illop, T_ILLOP)
TRAPHANDLER_NOEC(t_device, T_DEVICE)
TRAPHANDLER(t_dblflt, T_DBLFLT)
TRAPHANDLER(t_tss, T_TSS)
TRAPHANDLER(t_segnp, T_SEGNP)
TRAPHANDLER(t_stack, T_STACK)
TRAPHANDLER(t_gpflt, T_GPFLT)
TRAPHANDLER(t_pgflt, T_PGFLT)
TRAPHANDLER_NOEC(t_fperr, T_FPERR)
TRAPHANDLER(t_align, T_ALIGN)
TRAPHANDLER_NOEC(t_mchk, T_MCHK)
TRAPHANDLER_NOEC(t_simderr, T_SIMDERR)

TRAPHANDLER_NOEC(t_syscall, T_SYSCALL)


/*
 * Lab 3: Your code here for _alltraps
 */
# trapframe中的 ss、esp、eflags、cs、eip、error code(可选)在中断发生时由处理器压入内核栈，也就是TSS段中记录的SS0、ESP0所标识的栈
# 现在只需压入trapframe中的剩下寄存器：es ds 以及一组通用寄存器(用pusha指令将8个通用寄存器一起压栈)
# 然后将GD_KD也就是内核数据段的选择子载入ds es，pushl %esp将trapframe指针作为参数传给trap()，最后调用trap()
	_alltraps:
	pushl %ds # 压入一个trapframe所需的剩下寄存器
	pushl %es
	pushal

	movl $GD_KD, %eax # 加载段选择子
	movw %ax, %ds
	movw %ax, %es

	push %esp # 传入参数，调用trap函数
	call trap



